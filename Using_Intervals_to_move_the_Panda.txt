The next step is to cause the panda to actually
move back and forth.  Add the following lines of code:

[python]<code python>
import direct.directbase.DirectStart
from pandac.PandaModules import *

from direct.task import Task
from direct.actor import Actor
from direct.interval.IntervalGlobal import *
import math

#Load the first environment model
environ = loader.loadModel("models/environment")
environ.reparentTo(render)
environ.setScale(0.25,0.25,0.25)
environ.setPos(-8,42,0)

#Task to move the camera
def SpinCameraTask(task):
  angledegrees = task.time * 6.0
  angleradians = angledegrees * (math.pi / 180.0)
  base.camera.setPos(20*math.sin(angleradians),-20.0*math.cos(angleradians),3)
  base.camera.setHpr(angledegrees, 0, 0)
  return Task.cont

taskMgr.add(SpinCameraTask, "SpinCameraTask")

#Load the panda actor, and loop its animation
pandaActor = Actor.Actor("models/panda-model",{"walk":"models/panda-walk4"})
pandaActor.setScale(0.005,0.005,0.005)
pandaActor.reparentTo(render)
pandaActor.loop("walk")

#Create the four lerp intervals needed to walk back and forth
pandaPosInterval1= pandaActor.posInterval(13,Point3(0,-10,0), startPos=Point3(0,10,0))
pandaPosInterval2= pandaActor.posInterval(13,Point3(0,10,0), startPos=Point3(0,-10,0))
pandaHprInterval1= pandaActor.hprInterval(3,Point3(180,0,0), startHpr=Point3(0,0,0))
pandaHprInterval2= pandaActor.hprInterval(3,Point3(0,0,0), startHpr=Point3(180,0,0))

#Create and play the sequence that coordinates the intervals
pandaPace = Sequence(pandaPosInterval1, pandaHprInterval1,
  pandaPosInterval2, pandaHprInterval2, name = "pandaPace")
pandaPace.loop()

run()
</code>[/python]
[cxx]<code cxx>#include "pandaFramework.h"
#include "pandaSystem.h"

#include "genericAsyncTask.h"
#include "asyncTaskManager.h"

#include "cIntervalManager.h"
#include "cLerpNodePathInterval.h"
#include "cMetaInterval.h"

// Global stuff
PandaFramework framework;
PT(AsyncTaskManager) taskMgr = AsyncTaskManager::get_global_ptr(); 
PT(ClockObject) globalClock = ClockObject::get_global_clock();
NodePath camera;

// Task to move the camera
AsyncTask::DoneStatus SpinCameraTask(GenericAsyncTask* task, void* data) {
  double time = globalClock->get_real_time();
  double angledegrees = time * 6.0;
  double angleradians = angledegrees * (3.14 / 180.0);
  camera.set_pos(20*sin(angleradians),-20.0*cos(angleradians),3);
  camera.set_hpr(angledegrees, 0, 0);

  return AsyncTask::DS_cont;
}

int main(int argc, char *argv[]) {
  // Open a new window framework and set the title
  framework.open_framework(argc, argv);
  framework.set_window_title("My Panda3D Window");

  // Open the window
  WindowFramework *window = framework.open_window();
  camera = window->get_camera_group(); // Get the camera and store it

  // Load the environment model
  NodePath environ = window->load_model(framework.get_models(), "models/environment");
  environ.reparent_to(window->get_render());
  environ.set_scale(0.25 , 0.25, 0.25);
  environ.set_pos(-8, 42, 0);

  // Load our panda
  NodePath pandaActor = window->load_model(framework.get_models(), "panda-model");
  pandaActor.set_scale(0.005);
  pandaActor.reparent_to(window->get_render());
  
  // Load the walk animation
  window->load_model(pandaActor, "panda-walk4");
  window->loop_animations(0);

  // Create the lerp intervals needed to walk back and forth
  PT(CLerpNodePathInterval) pandaPosInterval1, pandaPosInterval2, pandaHprInterval1, pandaHprInterval2;
  pandaPosInterval1 = new CLerpNodePathInterval("pandaPosInterval1", 13.0, CLerpInterval::BT_no_blend,
                                                      true, false, pandaActor, window->get_render());
  pandaPosInterval1->set_start_pos(LPoint3f(0, 10, 0));
  pandaPosInterval1->set_end_pos(LPoint3f(0, -10, 0));

  pandaPosInterval2 = new CLerpNodePathInterval("pandaPosInterval2", 13.0, CLerpInterval::BT_no_blend,
                                                      true, false, pandaActor, window->get_render());
  pandaPosInterval2->set_start_pos(LPoint3f(0, -10, 0));
  pandaPosInterval2->set_end_pos(LPoint3f(0, 10, 0));

  pandaHprInterval1 = new CLerpNodePathInterval("pandaHprInterval1", 3.0, CLerpInterval::BT_no_blend,
                                                      true, false, pandaActor, window->get_render());
  pandaHprInterval1->set_start_hpr(LPoint3f(0, 0, 0));
  pandaHprInterval1->set_end_hpr(LPoint3f(180, 0, 0));

  pandaHprInterval2 = new CLerpNodePathInterval("pandaHprInterval2", 3.0, CLerpInterval::BT_no_blend,
                                                      true, false, pandaActor, window->get_render());
  pandaHprInterval2->set_start_hpr(LPoint3f(180, 0, 0));
  pandaHprInterval2->set_end_hpr(LPoint3f(0, 0, 0));
  
  // Create and play the sequence that coordinates the intervals
  PT(CMetaInterval) pandaPace;
  pandaPace = new CMetaInterval("pandaPace");
  pandaPace->add_c_interval(pandaPosInterval1, 0, CMetaInterval::RS_previous_end);
  pandaPace->add_c_interval(pandaHprInterval1, 0, CMetaInterval::RS_previous_end);
  pandaPace->add_c_interval(pandaPosInterval2, 0, CMetaInterval::RS_previous_end);
  pandaPace->add_c_interval(pandaHprInterval2, 0, CMetaInterval::RS_previous_end);
  pandaPace->loop();

  // Add our task.
  taskMgr->add(new GenericAsyncTask("Spins the camera", &SpinCameraTask, (void*) NULL));
  
  // This is a simpler way to do stuff every frame, if you're too lazy to create a task.
  Thread *current_thread = Thread::get_current_thread();
  while(framework.do_frame(current_thread)) {
    // Step the interval manager
    CIntervalManager::get_global_ptr()->step();
  }

  framework.close_framework();
  return (0);
}</code>[/cxx]

<i>Intervals</i> are tasks that change a property
from one value to another over a specified period of time.  Starting
an interval effectively starts a background process that modifies the
property over the specified period of time. For example, consider the
<code>pandaPosInterval1</code> above.  When that interval is
started, it will gradually adjust the position of the panda from
(0,10,0) to (0,-10,0) over a period of 13 seconds.  Similarly,
when the <code>pandaHprInterval1</code> is started,
the orientation of the panda will rotate 180 degrees over a period of 3 seconds.

<i>[python]Sequences[/python][cxx]MetaIntervals[/cxx]</i> are tasks that execute one interval
after another.  The <code>pandaPace</code> sequence above
causes the panda to move in a straight line, then turn, then in the
opposite straight line, then to turn again.  The code <code>pandaPace[python].[/python][cxx]->[/cxx]loop()</code> causes the [python]Sequence[/python][cxx]MetaInterval[/cxx] to be started
in looping mode.

The result of all this is to cause the panda to pace
back and forth from one tree to the other.
