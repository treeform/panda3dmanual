{| style="width:95%; margin:0 auto; background:#FFFACD; border:1px solid orange; text-align:left;"
| Some of the information in this page might not be correct.
<br>See the [[{{NAMESPACE}} talk:{{PAGENAME}}|Discussion page]] for more details.
|}

In addition to the several [[Texture Blend Modes]] described previously, there is a more advanced interface on TextureStage that allows for a larger vocabulary of texture blending options.

Although several of the following options (CMReplace, CMModulate, CMAdd) have obvious parallels with the simpler blend modes described previously, they are in fact more powerful, because with each of the following you may specify the particular source or sources to be used for the operation; you are not limited to simply applying the operation to the top texture and the texture below.

<h2>RGB modes</h2>

The following specify the effect of the RGB (color) channels.  A separate set of methods, below, specifies the effect of the alpha channel.

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMReplace, source, operand)
</pre>

This mode is similar to "replace mode".  Whatever color is specified by source and operand becomes the new color.

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMModulate, source0, operand0, source1, operand1)
</pre> 

This mode is similar to "modulate mode".  The color from source0/operand0 is multiplied by the color from source1/operand1.

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMAdd, source0, operand0, source1, operand1)
</pre> 

This mode is similar to "add mode".  The color from source0/operand0 is added to the color from source1/operand1, and the result is clamped to 1 (white).

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMAddSigned, source0, operand0, source1, operand1)
</pre> 

In this mode, the colors are added as signed numbers, and the result wraps.

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMSubtract, source0, operand0, source1, operand1)
</pre> 

In this mode, source1/operand1 is subtracted from source0/operand0.

<pre class="codeblock">
ts.setCombineRgb(TextureStage.CMInterpolate,
                 source0, operand0, source1, operand1, source2, operand2)
</pre> 

This is the only mode that uses three sources.  The value of source2/operand2 is used to select between source0/operand0 and source1/operand1.  When source2 is 0, source0 is selected, and when source2 is 1, source1 is selected.  When source2 is between 0 and 1, the color is smoothly blended between source0 and source1.

<h2>Alpha modes</h2>

The following methods more-or-less duplicate the functionality of the above, but they control what happens to the alpha channel.  Thus, you have explicit control over whether an alpha cutout in the top texture should produce an alpha cutout in the resulting object.

<pre class="codeblock">
ts.setCombineAlpha(TextureStage.CMReplace, source, operand)
ts.setCombineAlpha(TextureStage.CMModulate, source0, operand0, source1, operand1)
ts.setCombineAlpha(TextureStage.CMAdd, source0, operand0, source1, operand1)
ts.setCombineAlpha(TextureStage.CMAddSigned, source0, operand0, source1, operand1)
ts.setCombineAlpha(TextureStage.CMSubtract, source0, operand0, source1, operand1)
ts.setCombineAlpha(TextureStage.CMInterpolate, source0, operand0, source1, operand1,
                   source2, operand2)
</pre> 

<h2>Source values</h2>

This table lists the legal values for any of source, source0, source1, or source2, in the above calls.  This broadly gives you control over which two (or three) textures are used as inputs to the above combine modes.

<table>
<tr><td>TextureStage.CSTexture</td><td>The current, or "top" texture image.</td></tr>
<tr><td>TextureStage.CSConstant</td><td>A constant color, specified via TextureStage.setColor().</td></tr>
<tr><td>TextureStage.CSConstantColorScale</td><td>The same as CSConstant, but the color will be modified by NodePath.setColorScale().</td></tr>
<tr><td>TextureStage.CSPrimaryColor</td><td>The "primary" color of the object, before the first texture stage was applied, and including any lighting effects.</td></tr>
<tr><td>TextureStage.CSPrevious</td><td>The result of the previous texture stage; i.e. the texture below.</td></tr>
<tr><td>TextureStage.CSLastSavedResult</td><td>The result of any of the previous texture stages; specifically, the last stage for which TextureStage.setSavedResult(True) was called.</td></tr>
</table>

<h2>Operands</h2>

This table lists the legal values for any of operand, operand0, operand1, or operand2, in the above calls.  This fine-tunes the channel data that is used from each texture input.

<table>
<tr><td>TextureStage.COSrcColor</td><td>Use the RGB color.  When used in a setCombineAlpha() call, RGB is automatically aggregated into grayscale.</td></tr>
<tr><td>TextureStage.COOneMinusSrcColor</td><td>The complement of the RGB color.</td></tr>
<tr><td>TextureStage.COSrcAlpha</td><td>Use the alpha value.  When used in a setCombineRgb() call, alpha is automatically expanded into uniform RGB.</td></tr>
<tr><td>TextureStage.COOneMinusSrcAlpha</td><td>The complement of the alpha value.</td></tr>
