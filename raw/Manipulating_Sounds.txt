<h2>Looping a Sound</h2>

To cause a sound to loop (i.e., cause it to repeat once it is finished playing) do the following:

[python]
<code python>
mySound.setLoop(True)
mySound.play()
</code>
[/python]

[cxx]
<code cxx>
mySound->set_loop(True);
mySound->play();
</code>
[/cxx]

To stop a sound from looping pass False in the [python]<code python>setLoop</code>[/python][cxx]<code cxx> set_loop</code>[/cxx] function.

[python]
<code python>
mySound.setLoop(False)
</code>
[/python]

[cxx]
<code cxx>
mySound->set_loop(False);
</code>
[/cxx]

Sounds can also be looped for a certain number of times: 

[python]
<code python>
mySound.setLoopCount(n)
</code>
[/python]

[cxx]
<code cxx>
mySound->set_loop_count(n);
</code>
[/cxx]

Where 'n' can be any positive integer.
0 will cause a sound to loop forever.
1 will cause a sound to play only once.
>1 will cause a sound to loop that many times.

<i>NOTE</i>  Setting a sound's loop count will automatically set a sound's loop flag to 0 or >1 will automatically <code>setLoop</code> to TRUE.

<h2>Notes on Looping Sounds Seamlessly</h2>

<p>Looping a sound seamlessly should be as simple as loading the sound, then calling <code>setLoop</code> and <code>play</code>.  However, occasionally Panda users have had difficulty getting sounds to loop seamlessly.  The problems have been traced to three(!) different causes:</p>

<ol>
<li>Some MP3 encoders contain a bug where they add blank space at the end of the sound.  This causes a skip during looping.  Try using a wav instead.
<li>Some have tried using Sound Intervals to create a loop.  Unfortunately, sound intervals depend on Panda's Thread to restart the sound, and if the CPU is busy, there's a skip.  This is not a seamless method, in general.  Use <code>setLoop</code> instead.
<li>There is a bug in Miles sound system, which requires a workaround in Panda3D.  At one time, the workaround was causing problems with FMOD, until we devised a new workaround.  This bug no longer exists, you can ignore it.
</ol>

<p>So the easiest way to get a reliable looping sound is to use wav files, and to use <code>setLoop</code>, not sound intervals.  Of course, when it comes time to ship your game, you can convert your sounds to mp3, but before you do, test your mp3 encoder to see if it contains the blank-space bug.</p>

<h2>Cueing Time</h2>

There are <code>getTime</code>, <code>setTime</code> and <code>length</code> functions for sounds. These will respectively, report the current time position, set the current time position and report the length. All these are in seconds.

[python]
<code python>
mySound.length()
</code>
[/python]

[cxx]
<code cxx>
mySound->length();
</code>
[/cxx]

will return the length of a sound file in seconds.

[python]
<code python>
mySound.getTime()
</code>
[/python]

[cxx]
<code cxx>
mySound->get_time();
</code>
[/cxx]

will get the current time the 'playback head' of a sound is at in seconds.

[python]
<code python>
mySound.setTime(n)
</code>
[/python]

[cxx]
<code cxx>
mySound->set_time(n);
</code>
[/cxx]

will set the 'playhead head' of a sound to n (where is seconds).

<i>NOTE</i>   Sounds will start playing IMMEDIATELY after the command is issued, and calling <code>play</code> will cause the sound to start over from the beginning.

<h2>Changing Playback Speed</h2>

To change a sound's playback speed, use:

[python]
<code python>
mySound.setPlayRate(n)
</code>
[/python]

[cxx]
<code cxx>
mySound->set_play_rate(n);
</code>
[/cxx]

Where <code>n</code> is any float.

<i>NOTE!!!</i> Negative numbers will play a sound backwards.  Passing the value 0 will pause the sound.

You can also get a sound's play rate with:

[python]
<code python>
mySound.getPlayRate()
</code>
[/python]

[cxx]
<code cxx>
mySound->get_play_rate();
</code>
[/cxx]
