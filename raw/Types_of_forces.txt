Panda3D provides two types of forces that you can apply to an object. 


<h2>LinearVectorForce</h2>
A <code>LinearVectorForce</code> treats the object as a point mass. It applies an acceleration in Newtons to the center of mass of the object it was added to. The direction of this force is relative to the orientation of the <code>ForceNode</code> that the <code>LinearVectorForce</code> was applied to.

<i>Note: Since <code>LinearVectorForce</code> treats the object as a point mass, it is not possible to apply a rotation of any kind to your object. For rotational forces, see <code>AngularVectorForce</code> below.</i>

<b>Example:</b>
<pre class="codeblock">
lvf=LinearVectorForce(1,0,0)  # Push 1 newton in the positive-x direction 
forceNode.addForce(lvf)  # Determine coordinate space of this force node
actorNode.getPhysical(0).addLinearForce(lvf) # Add the force to the object
</pre>


<h2>AngularVectorForce</h2>

The <code>AngularVectorForce</code> applies a torque to the object it is attatched to. The acceleration is in Newtons, and <code>AngularVectorForce</code> may be treated in much the same way as <code>LinearVectorForce</code>. There are, however, some minor differences that that should be taken into account.

<code>AngularVectorForce</code> does not have a <code>.setDependantMass()</code> . The reason for this is simple: mass <i>must</i> be used in the torque calculations. As such, you will want to make sure your forces are sufficiently small or your masses are sufficiently large to keep your rotational velocity sane.

<b>Example:</b>
<pre class="codeblock">
avf=AngularVectorForce(1,0,0) # Spin around the positive-x axis 
forceNode.addForce(avf) # Determine which positive-x axis we use for calculation
actorNode.getPhysical(0).addAngularForce(avf) # Add the force to the object
</pre>

One additional caveat with <code>AngularVectorForce</code>: Angular forces will not be processed on your object until an <code>AngularIntegrator</code> is added to the <code>PhysicsManager</code>. 

<b>Example:</b>
<pre class="codeblock">
from pandac.PandaModules import AngularEulerIntegrator

angleInt = AngularEulerIntegrator() # Instantiate an AngleIntegrator()
base.physicsMgr.attachAngularIntegrator(self.angleInt) # Attatch the AngleIntegrator to the PhysicsManager
</pre>


<i>Editor's Note: Each type of force should be given it's own page with much more in depth examples, and perhaps a small sample program.</i>
