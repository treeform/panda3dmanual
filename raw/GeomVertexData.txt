The fundamental object used to store vertex information in Panda is the
<b>GeomVertexData</b>.  This stores a list of vertices, organized
conceptually as a table, where each row of the table represents a
different vertex, and the columns of the table represent the different
kinds of per-vertex data that may be associated with each vertex.  For
instance, the following table defines four vertices, each with its own
vertex position, normal vector, color, and texture coordinate
pair:

<center><table style="border-collapse: collapse">
<tr>
<td></td>
<td style="text-align: center">vertex</td>
<td style="text-align: center">normal</td>
<td style="text-align: center">color</td>
<td style="text-align: center">texcoord</td>
</tr>
<tr><td style="padding-right: 5pt">0</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 0, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 0)</td>
</tr>
<tr><td style="padding-right: 5pt">1</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 1, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 1)</td>
</tr>
<tr><td style="padding-right: 5pt">2</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 1, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 1)</td>
</tr>
<tr><td style="padding-right: 5pt">3</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0)</td>
</tr>
</table></center>

Vertices are always numbered beginning at 0, and continue to the
number of rows in the table (minus 1).

Not all GeomVertexData objects will use these same four columns; some
will have fewer columns, and some will have more.  In fact, all
columns, except for "vertex", which stores the vertex position, are
optional.

The order of the columns is not meaningful, but the column names are.
There are certain column names that are reserved for Panda, and
instruct Panda what the meaning of each column is.  For instance, the
vertex position column is always named "vertex", and the lighting
normal column, if it is present, must be named "normal".  See
[[GeomVertexFormat]] for the complete list of reserved column names.

You can define your own custom columns.  If there are any columns that
have a name that Panda does not recognize, Panda will not do anything
special with the column, but it can still send it to the graphics
card.  Of course, it is then up to you to write a [[Shader Basics|vertex shader]] that
understands what to do with the data in the column.

It is possible to break up a GeomVertexData into more than one array.
A <b>GeomVertexArray</b> is table of vertex data that is stored in one
contiguous block of memory.  Typically, each GeomVertexData consists
of just one array; but it is also possible to distribute the data so
that some columns are stored in one array, while other columns are
stored in another array:

<center><table style="border-collapse: collapse">
<tr>
<td></td>
<td style="text-align: center">vertex</td>
<td style="text-align: center">texcoord</td>
<td style="padding-right: 16pt"></td>
<td style="text-align: center">normal</td>
<td style="text-align: center">color</td>
</tr>
<tr><td style="padding-right: 5pt">0</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 0, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 0)</td>
<td></td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
</tr>
<tr><td style="padding-right: 5pt">1</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 1, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(1, 1)</td>
<td></td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
</tr>
<tr><td style="padding-right: 5pt">2</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 1, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 1)</td>
<td></td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
</tr>
<tr><td style="padding-right: 5pt">3</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 0)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0)</td>
<td></td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1)</td>
<td style="border: 1px solid black; background: #c1beea; padding-left: 5pt; padding-right: 5pt">(0, 0, 1, 1)</td>
</tr>
</table></center>

You might want to do this, for instance, if you have certain columns
of data that are always the same between different blocks of vertices;
you can put those columns in a separate array, and then use the same
array within multiple different GeomVertexData objects.  There is no
limit to the number of different arrays you can have within one
GeomVertexData; you can make each column a separate array if you like.
(There may be performance implications to consider.  Some graphics
drivers may work better with one block of contiguous data--one
array--while others may prefer many different arrays.  This
performance difference is likely to be small, however.)
