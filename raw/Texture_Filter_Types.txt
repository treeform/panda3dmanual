It's rare that the pixels of a texture image match one-to-one with
actual screen pixels when a texture is visible onscreen.  Usually, it
is the case that either a single pixel of the texture is stretched
over multiple screen pixels (<b>texture magnification</b>--the texture image is stretched bigger), or the
opposite, that multiple pixels of a texture contribute to the color of
a single screen pixel (<b>texture minification</b>--the texture image is squished smaller).  Often, a single
polygon will have some texture pixels that need to be magnified, and
some pixels that need to be minified (the graphics card can handle
both cases on a single polygon).

You can control how the texture looks when it is magnified or minified
by setting its <b>filter type</b>.

<pre class="codeblock">
texture.setMagfilter(filterType)
texture.setMinfilter(filterType)
</pre>

There is a separate filterType setting for magnification and for
minification.  For both magnification and minification, the filterType
may be one of:

<table>
<tr><td><code>Texture.FTNearest</code></td><td>Sample the nearest pixel.</td></tr>
<tr><td><code>Texture.FTLinear</code></td><td>Sample the four nearest
pixels, and linearly interpolate them.</td></tr>
</table>

For minification only, in addition to the above two choices, you can
also choose from:

<table>
<tr><td><code>Texture.FTNearestMipmapNearest</code></td><td>Point sample the pixel from the nearest mipmap level.</td></tr>
<tr><td><code>Texture.FTLinearMipmapNearest</code></td><td>Bilinear filter the pixel from the nearest mipmap level.</td></tr>
<tr><td><code>Texture.FTNearestMipmapLinear</code></td><td>Point sample the pixel from two mipmap levels, and linearly blend.</td></tr>
<tr><td><code>Texture.FTLinearMipmapLinear</code></td><td>Bilinearly filter the pixel from two mipmap levels, and linearly blend the results.  This is also called <b>trilinear filtering</b>.</td></tr>
</table>

The default filter type for both magnification and minification is
<code>FTLinear</code>.

Consider the visual effects of the various filter types on magnification and
minification of the following texture:

[[Image:fractal.jpg|A fractal image]]

<h2>FTNearest</h2>

<pre class="codeblock">
texture.setMagfilter(Texture.FTNearest)
texture.setMinfilter(Texture.FTNearest)
</pre>

[[Image:Texture mag nearest.jpg|Magnification w/FTNearest]]
[[Image:Texture min nearest.jpg|Minification w/FTNearest]]

Usually, <code>FTNearest</code> is used only to achieve a special
pixelly effect.

<h2>FTLinear</h2>

<pre class="codeblock">
texture.setMagfilter(Texture.FTLinear)
texture.setMinfilter(Texture.FTLinear)
</pre>

[[Image:Texture mag linear.jpg|Magnification w/FTLinear]]
[[Image:Texture min linear 0.jpg|Minification w/FTLinear]]

<code>FTLinear</code> is a good general-purpose choice, though it
isn't perfect.

<h2>Mipmaps</h2>

Many graphics tutorials will go on for pages and pages about exactly
what mipmapping means and how it all works inside.  We'll spare you
those details here; but you should understand the following things
about mipmapping:

(1) It requires 33% more texture memory (per mipmapped texture), but
it renders quickly.

(2) It helps the texture look much smoother than filtering alone when
it is minified.

(3) Mipmapping doesn't have anything at all to do with magnification.

(4) It has a tendency to blur minified textures out a little too much,
especially when the texture is applied to a polygon that is very
nearly edge-on to the camera.

There are four different filter types that involve mipmapping, but you
almost always want to use just the last one,
<code>FTLinearMipmapLinear</code>.  The other modes are for advanced
uses, and sometimes can be used to tweak the mipmap artifacts a bit
(especially to reduce point 4, above).  If you don't understand the description in the table above, it's not worth worrying about.

<pre class="codeblock">
texture.setMinfilter(Texture.FTLinearMipmapLinear)
</pre>

[[Image:Texture min mipmap 0.jpg|Minification w/FTLinearMipmapLinear]]

<h2>Anisotropic Filtering</h2>

There is one final addition to the texture filtering equation: you can
enable anisotropic filtering on top of any of the above filter modes,
which enables a more expensive, slightly slower rendering mode that
generally produces superior effects.  In particular, anisotropic
filtering is usually better at handling texture minification than
mipmapping, and doesn't tend to blur out the texture so much.

To enable anisotropic filtering, you specify the degree:

<pre class="codeblock">
texture.setAnisotropicDegree(degree)
</pre>

The degree should be an integer number.  The default value is 1, which
indicates no anisotropic filtering; set it to a higher number to
indicate the amount of filtering you require.  Larger numbers are more
expensive but produce a better result, up to the capability of your
graphics card.  Many graphics cards don't support any degree other
than 2, which is usually sufficient anyway.

<pre class="codeblock">
texture.setAnisotropicDegree(2)
</pre>

[[Image:Texture mag aniso.jpg|Magnification w/anisotropic filtering]]
[[Image:Texture min aniso.jpg|Minification w/anisotropic filtering]]

Some older graphics cards cannot perform anisotropic filtering.
