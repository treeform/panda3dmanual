As described earlier, the <i>(u, v)</i> texture coordinates that you assign to your vertices
are what determines how the texture fits on your geometry.  Often, you will use
texture coordinates that always fall within the range [0, 1], which is
the complete range of the pixels of your texture image.  However, it is
also legal to use texture coordinates that go outside this range; you can
have negative values, for instance, or numbers higher than 1.

So if the texture image is only defined over the range [0, 1], what does
the texture look like outside this range?  You can specify this with
the <b>texture wrap mode</b>.

<pre class="codeblock">
texture.setWrapU(wrapMode)
texture.setWrapV(wrapMode)
</pre>

The wrapMode parameter is specified separately for the <i>u</i> and
<i>v</i> directions (there is also a <code>setWrapW()</code> for
[[3-D Textures|3-D textures]], but that's an advanced topic).  The
wrapMode may be any of the following values:

<table>
<tr><td><code>Texture.WMRepeat</code></td><td>The texture image
repeats to infinity.</td></tr>
<tr><td><code>Texture.WMClamp</code></td><td>The last pixel of the
texture image stretches out to infinity.</td></tr>
<tr><td><code>Texture.WMBorderColor</code></td><td>The color specified
by <code>texture.setBorderColor()</code> is used to fill the space.</td></tr>
<tr><td><code>Texture.WMMirror</code></td><td>The texture image flips
back-and-forth to infinity.</td></tr>
<tr><td><code>Texture.WMMirrorOnce</code></td><td>The texture image flips
backwards, once, and then the "border color" is used.</td></tr>
</table>

The default wrap mode is <code>WMRepeat</code>.

Consider the following simple texture image:

[[Image:Small r.png|black_r.png]]

We will apply this texture in the center of a large polygon whose
texture coordinates range considerably farther than [0, 1] in both
directions.

<h2>WMRepeat</h2>

<pre class="codeblock">
texture.setWrapU(Texture.WMRepeat)
texture.setWrapV(Texture.WMRepeat)
</pre>

[[Image:Texture repeat.png|WMRepeat]]

<code>WMRepeat</code> mode is often used to tile a relatively small
texture over a large surface.

<h2>WMClamp</h2>

<pre class="codeblock">
texture.setWrapU(Texture.WMClamp)
texture.setWrapV(Texture.WMClamp)
</pre>

[[Image:Texture clamp.png|WMClamp]]

<code>WMClamp</code> mode is rarely used on large polygons because, frankly, it looks terrible when the pixels stretch out to infinity like this; but this mode is usually the right choice when the texture exactly fills its polygon (see <i>One caution about a common wrap error,</i> below).

<h2>WMBorderColor</h2>

<pre class="codeblock">
texture.setWrapU(Texture.WMBorderColor)
texture.setWrapV(Texture.WMBorderColor)
texture.setBorderColor(VBase4(0.4, 0.5, 1, 1))
</pre>

[[Image:Texture border color blue.png|WMBorderColor]]

The above blue color was chosen for illustration purposes; you can use
any color you like for the border color.  Normally, you would use the background
color of the texture as the border color, like this:

<pre class="codeblock">
texture.setWrapU(Texture.WMBorderColor)
texture.setWrapV(Texture.WMBorderColor)
texture.setBorderColor(VBase4(1, 1, 1, 1))
</pre>

[[Image:Texture border color white.png|WMBorderColor]]

Some very old graphics drivers don't support
<code>WMBorderColor</code>.  In this case, Panda3D will fall back to
<code>WMClamp</code>, which will look similar as long as there is a
sufficient margin of background color around the edge of your texture (unlike our sample texture, which goes all the way out the edge).

<h2>WMMirror</h2>

<pre class="codeblock">
texture.setWrapU(Texture.WMMirror)
texture.setWrapV(Texture.WMMirror)
</pre>

[[Image:Texture mirror.png|WMMirror]]

Many older graphics drivers do not support <code>WMMirror</code>.  In
this case, Panda3D will fall back to <code>WMRepeat</code>.

<h2>WMMirrorOnce</h2>

<pre class="codeblock">
texture.setWrapU(Texture.WMMirrorOnce)
texture.setWrapV(Texture.WMMirrorOnce)
texture.setBorderColor(VBase4(0.4, 0.5, 1, 1))
</pre>

[[Image:Texture mirror once.png|WMMirrorOnce]]

Few graphics drivers support <code>WMMirrorOnce</code>.  In this case,
Panda3D will fall back to <code>WMBorderColor</code>.

<h2>Setting different wrap modes</h2>

It is possible to set different wrap modes in the <i>u</i> and
<i>v</i> directions:

<pre class="codeblock">
texture.setWrapU(Texture.WMRepeat)
texture.setWrapV(Texture.WMClamp)
</pre>

[[Image:Texture clamp repeat.png|WMClamp and WMRepeat]]

<h2>One caution about a common wrap mode error</h2>

When you apply a texture that is intended to exactly fill a
polygon--that is, the texture coordinates range from 0 to 1, but no
further--you should usually set its wrap mode to <i>clamp</i>.  This
is because if you let it keep the default value of <i>repeat</i>, the
color may bleed in from the opposite edge, producing a thin line along
the edge of your polygon, like this:

[[Image:Texture wrap error.png|A common wrap mode error]]

This is a particularly common error with a texture that is painted as
an alpha cutout, where there is an image with a fully transparent
background: you will often see an thin, barely-visible edge floating
along the top (for instance) of the polygon.  This edge is actually
the bottom edge of the texture bleeding onto the top, because the
designer specified <code>WMRepeat</code> instead of
the correct mode, <code>WMClamp</code>.
