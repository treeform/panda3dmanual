We'll now describe in detail what functions are specific to buffers and windows in Panda.

<h2>GraphicsBuffer and ParasiteBuffer</h2>

Use these if you want to do off-screen rendering. You must pass <code>True</code> when you [[The Graphics Engine|create]] it if you want to get a texture from it. Otherwise, there is no difference in functionality than a [[The GraphicsOutput class|GraphicsOutput]].

The only difference between a <code>GraphicsBuffer</code> and a <code>ParasiteBuffer</code> is that a <code>ParasiteBuffer</code> does not create it own framebuffer space. To create a <code>ParasiteBuffer</code> you call <code>makeParasite()</code> from the graphics engine.
<pre class="codeblock">
makeParasite(host, name,sort, xSize, ySize)
</pre>

The arguments <code>name</code>, <code>sort</code>, <code>xSize</code>, and <code>ySize</code> mean the same things they mean for [[The Graphics Engine|makeWindow and makeBuffer]]. The new argument <code>host</code> is the [[The GraphicsOutput class|GraphicsOutput object]] whose space in memory it will use. Any rendering done to the parasite is done to the same space in memory as its host. The function [[The GraphicsOutput class|makeTextureBuffer]] sometimes returns a <code>ParasiteBuffer</code> for space saving reasons. It is also useful for APIs that don't support offscreen rendering.

<code>ParasiteBuffer</code> objects are automatically setup for calls to <code>getTexture()</code> since their contents get cleared when <code>host</code> draws itself.

<h2>GraphicsWindows</h2>
Unlike <code>GraphicsBuffer</code> objects <code>GraphicsWindow</code> objects have a lot more functionality than <code>GraphicsOutput</code> objects.

The most basic of these functions is <code>hasKeyboard()</code> and <code>hasPointer()</code> which returns whether or not this window has the focus of keyboard and pointer respectively. Any calls to keyboard or pointer functions when you do not have control of them generates an error. 

You can get the number of input devices for this window by using <code>getNumInputDevices()</code>. In the absence of a joystick, etc. there is usually only one input device, the 'keyboard/mouse' device. If the API you are using supports it, you can move a mouse to a certain place in the window by using <code>movePointer(device, x,y)</code> where <code>device</code> is the name of the device that holds the mouse (most probabaly 'keyboard/mouse') and <code>x</code> and <code>y</code> represent the [[Scene Graph Manipulations|screen position]] where you want to move the pointer. It returns <code>True</code> if it was succesful, and <code>False</code> otherwise.

You can also ask a window if it <code>isFullscreen()</code> and if it <code> isClosed()</code>. It is important to note that a window is not automatically opened after a call to [[The Graphics Engine|makeWindow]] and is not automatically closed after a call to [[The Graphics Engine|closeWindow]].

In order to get the full set of properties for a given window you use the function <code>getProperties()</code>. This returns a <code>WindowProperties</code> object that holds all the information for the given screen. See the API documentation for the full functionality of the <code>WindowProperties</code> class. 

If you want to change these properties, use <code>getRequestedProperties()</code> and apply the proper <code>WindowProperties</code> functions. 

To run panda3d in full screen, rather than a window, do the following:
<pre class="codeblock">
wp = WindowProperties() 
wp.setFullscreen(True) 
base.win.requestProperties(wp)
</pre>

Alternatively, you can modify the fullscreen configuration variable before importing <code>direct.directbase.DirectStart</code>:
<pre class="codeblock">
from pandac.PandaModules import loadPrcFileData
loadPrcFileData("", """fullscreen 1
win-size 1024 768""")

from direct.showbase.DirectObject import DirectObject   # for event handling 
import direct.directbase.DirectStart 
import sys 

class World(DirectObject): 
   def __init__(self): 
      self.accept("escape",sys.exit) 

w= World() 
run()
</pre>


If a requested change is not possible or invalid, you can call <code>getRejectedProperties()</code>. It returns a <code>WindowProperties</code> object that holds all of the properties that could not be changed.

Windows can also send [[Event Handling|Events]] when the user changes a property of the window. You can get the name of this event by calling <code>getWindowEvent()</code>. Initially, all windows send the same event when changed. If you want to setup events for a certain window, use <code>setWindowEvent(name)</code> where <code>name</code> is the name of the event you want sent when this window gets changed externally.

For more advanced functionality see [http://www.panda3d.org/apiref.php?page=GraphicsWindow <code>GraphicsWindow</code> in the API documentation.]
