By default, Panda3D runs a task that enables you to move
the camera using the mouse. [cxx]To enable it, use the following command:
<code cxx>window->setup_trackball();</code>[/cxx]

The keys to navigate are:

<ul>
<li>Left Button: pan left and right
<li>Right Button: move forwards and backwards
<li>Middle Button: rotate around the origin of the application
<li>Right and Middle Buttons: roll the point of view around the view axis
</ul>

Go ahead and try this camera control system.  The
problem with this camera control system is that it is sometimes
awkward, it is not always easy to get the camera pointed in the
direction we want.

Instead, we are going to write a <i>task</i> that
controls the camera's position explicitly.  A <i>task</i> is nothing
but a subroutine that gets called every frame.  Update your code
as follows:

[python]<code python>
import direct.directbase.DirectStart
from direct.task import Task
from direct.actor import Actor
import math

#Load the first environment model
environ = loader.loadModel("models/environment")
environ.reparentTo(render)
environ.setScale(0.25,0.25,0.25)
environ.setPos(-8,42,0)

#Task to move the camera
def SpinCameraTask(task):
  angledegrees = task.time * 6.0
  angleradians = angledegrees * (math.pi / 180.0)
  base.camera.setPos(20*math.sin(angleradians),-20.0*math.cos(angleradians),3)
  base.camera.setHpr(angledegrees, 0, 0)
  return Task.cont

taskMgr.add(SpinCameraTask, "SpinCameraTask")

run()
</code>[/python]
[cxx]<code cxx>#include "pandaFramework.h"
#include "pandaSystem.h"

#include "genericAsyncTask.h"
#include "asyncTaskManager.h"

PandaFramework framework;
// The global task manager
PT(AsyncTaskManager) taskMgr = AsyncTaskManager::get_global_ptr(); 
// The global clock
PT(ClockObject) globalClock = ClockObject::get_global_clock();
// Here's what we'll store the camera in.
NodePath camera;

// This is our task - a global or static function that has to return DoneStatus.
// The task object is passed as argument, plus a void* pointer, cointaining custom data.
// For more advanced usage, we can subclass AsyncTask and override the do_task method.
AsyncTask::DoneStatus SpinCameraTask(GenericAsyncTask* task, void* data) {
  // Calculate the new position and orientation (inefficient - change me!)
  double time = globalClock->get_real_time();
  double angledegrees = time * 6.0;
  double angleradians = angledegrees * (3.14 / 180.0);
  camera.set_pos(20*sin(angleradians),-20.0*cos(angleradians),3);
  camera.set_hpr(angledegrees, 0, 0);

  // Tell the task manager to continue this task the next frame.
  return AsyncTask::DS_cont;
}

int main(int argc, char *argv[]) {
  // Open a new window framework and set the title
  framework.open_framework(argc, argv);
  framework.set_window_title("My Panda3D Window");

  // Open the window
  WindowFramework *window = framework.open_window();
  camera = window->get_camera_group(); // Get the camera and store it

  // Load the environment model
  NodePath environ = window->load_model(framework.get_models(),"models/environment");
  environ.reparent_to(window->get_render());
  environ.set_scale(0.25,0.25,0.25);
  environ.set_pos(-8,42,0);

  // Add our task.
  // If we specify custom data instead of NULL, it will be passed as second argument
  // to the task function.
  taskMgr->add(new GenericAsyncTask("Spins the camera", &SpinCameraTask, (void*) NULL));
  
  // Do the main loop - then close up.
  framework.main_loop();
  framework.close_framework();
  return (0);
}</code>[/cxx]

The function <code>taskMgr[->]add</code> tells panda's <i>task manager</i> to call the subroutine <code>SpinCameraTask</code> every frame.  This is a subroutine that we have written to control the camera.  As long as the subroutine <code>SpinCameraTask</code> returns the constant <code>[cxx]Async[/cxx]Task[::][cxx]DS_[/cxx]cont</code>, the task manager will continue to call it every frame.

[cxx]The object passed to <code>taskMgr->add</code> is an <code>AsyncTask</code> object. We can use <code>GenericAsyncTask</code> to wrap a global function or static method around a task. We can also pass an additional <code>void*</code> parameter that we can cast into a pointer of any data type we like, which is passed as argument to the task function. A GenericAsyncTask function must look like the following:

<code cxx>AsyncTask::DoneStatus your_task(GenericAsyncTask* task, void* data) {
  // Do your stuff here.

  // Tell the task manager to continue this task the next frame.
  // You can also pass DS_done if this task should not be run again.
  return AsyncTask::DS_cont;
}</code>

For more advanced usage, you can subclass AsyncTask and override the <code>do_task</code> method to make it do what you want.[/cxx]

In our code, the subroutine <code>SpinCameraTask()</code> calculates the desired position of
the camera based on how much time has elapsed.  The camera rotates 6
degrees every second.  The first two lines compute the desired
orientation of the camera, first in degrees, then in radians.  The <code>[func]setPos[/func]</code> call actually sets the position of the camera.
(Remember that Y is horizontal and Z is vertical, so the position is changed by animating X and Y while Z is left fixed at 3 units above ground level.) The <code>[func]setHpr[/func]</code> call actually sets the orientation.

The camera should no longer be underground, and
furthermore, the camera should now be rotating about the clearing:

[[Image:Tutorial2.jpg]]

For more information about tasks, visit [[Tasks|this]] page.
