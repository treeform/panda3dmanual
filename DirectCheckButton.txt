DirectCheckButtons are similar to buttons, except they represent a binary state that is toggled when it is clicked.  Their usage is almost identical to regular buttons, except that the text area and box area can be modified separately.

<center><table>
<tr><td><b>Keyword</b></td><td><b>Definition</b></td><td><b>Value</b></td></tr>
<tr><td>text_scale</td><td>Scale of the displayed text</td><td>(sx,sz)</td></tr>
<tr><td>indicatorValue</td><td>The initial boolean state of the checkbox</td><td>0 or 1</td></tr>
<tr><td>boxImage</td><td>Image on the checkbox</td><td>Image Path</td></tr>
<tr><td>boxImageColor</td><td>Color of the image on the box</td><td>(R,G,B,A)</td></tr>
<tr><td>boxImageScale</td><td>Scale of the displayed image</td><td>Number</td></tr>
<tr><td>boxPlacement</td><td>Position of the box relative to the text area</td><td>'left','right'</td></tr>
<tr><td>boxRelief</td><td>Relief appearance of the checkbox</td><td>DGG.SUNKEN or DGG.RAISED</td></tr>
<tr><td>boxBorder</td><td>Size of the border around the box</td><td>Number</td></tr>
<tr><td>command</td><td>Command the button performs when clicked(0 or 1 is passed, depending on the state)</td><td>Function</td></tr>
<tr><td>extraArgs</td><td>Extra arguments to the function specified in command</td><td>[Extra Arguments]</td></tr>
<tr><td>commandButtons</td><td>Which mouse button must be clicked to do the command</td><td>LMB, MMB, or RMB</td></tr>
<tr><td>rolloverSound</td><td>The sound made when the cursor rolls over the button</td><td>Sound File Path</td></tr>
<tr><td>clickSound</td><td>The sound made when the cursor clicks on the button</td><td>Sound File Path</td></tr>
<tr><td>pressEffect</td><td>Whether or not the button sinks in when clicked</td><td><0 or 1></td></tr>
</table></center>

<h2>Example</h2>
<code python>
import direct.directbase.DirectStart
from direct.gui.OnscreenText import OnscreenText 
from direct.gui.DirectGui import *
from pandac.PandaModules import *


# Add some text
bk_text = "This is my Demo"
textObject = OnscreenText(text = bk_text, pos = (0.95,-0.95), 
scale = 0.07,fg=(1,0.5,0.5,1),align=TextNode.ACenter,mayChange=1)

# Callback function to set  text 
def setText(status):
	if(status):
		bk_text = "Checkbox Selected"
	else:
		bk_text = "Checkbox Not Selected"
	textObject.setText(bk_text)

# Add button
b = DirectCheckButton(text = "CheckButton" ,scale=.05,command=setText)

# Run the tutorial
run()
</code>


<h2>A note on programatically changing the indicatorValue</h2>
If you programatically want to change the checkbutton's indicatorValue, you need to call <code>setIndicatorValue</code> afterwards to update the checkbutton, like:
<code python>b["indicatorValue"] = True
b.setIndicatorValue()</code>

<h2>A note on boxImage and other box* keywords</h2>

Just as DirectButton may be passed a 4-tuple of values to be used in the four button states, the box* keyword arguments may be supplied with multiple entries to denote the unchecked and checked state. To supply arguments to be used in the two states of the checkbox, construct a 3-tuple of values with a 'None' in the final entry, i.e. (unchecked, checked, None). For example, to set two different images for the unchecked and checked states:

<code python>
boxImage = ("pathToDisabledImage.jpg", "pathToEnabled.jpg", None)
</code>
