<h2>Multi-Pass Rendering</h2>

Sometimes you may need to draw the same scene more than once per frame, each view looking different. This is where multi-pass rendering comes into play.


The easiest way to do implement multi-pass rendering is to use the method mentioned near the bottom in [[The GraphicsOutput class]]. You:

# setup a GraphicsBuffer object
# create a camera for it and
# place the camera in the scene.

However, this method assumes you have two independent scene graphs. If you use this method to render the same scene graph, it is only useful for showing the scene from a different camera view. To actually make the scenes have different [[Render Objects|RenderStates]] (i.e. one without lighting, one with lighting) you must also change how each Camera renders the scene.

Each Camera node has a function called <code>setInitialState(state)</code>. It makes every object in the scene get drawn as if the top node in its scene graph has <code>state</code> as its [[Render Attributes|RenderState]]. This still means that [[Render Attributes|attributes]] can be changed/overriden after the Camera has been put on a scene.

<pre class="codeblock">
<nowiki>#this makes everything drawn by the default camera use myNodePath's RenderState</nowiki>
base.cam.setInitialState(myNodePath.getState())
</pre>

You may, however, want more control over what RenderState gets assigned to each node in the scene. You can do this using the Camera class methods <code>setTagStateKey(key)</code> and <code>setTagState(value, state)</code>. For any NodePaths that you want to recieve special treatment you call <code>setTag(key, value)</code>(See [[Common State Changes]]). Now, anytime the Camera sees a NodePath with a tag named <code>key</code> the Camera assigns it whatever RenderState is associated with <code>value</code>.

<pre class="codeblock">
<nowiki>#Assume we have CgShaderAttrib instances toonShadingAttrib and blurShadingAttrib</nowiki>
#and we have a Camera whose NodePath is myCamera

base.cam.node().setTagStateKey("Toon Shading")
base.cam.node().setTagState("True", RenderState.make(toonShadingAttrib))

myCamera.node().setTagStateKey("Blur Shading")
myCamera.node().setTagState("True", RenderState.make(blurShadingAttrib))

# this makes myNodePath and its children get toonShaded
# when rendered by the default camera
myNodePath.setTag("Toon Shading", "True")
....
#now if you want myNodePath to be blurred when seen by myCamera,
#it's as easy as adding a tag
myNodePath.setTag("Blur Shading", "True")
</pre>

For a full guide about Multi-Pass rendering in Panda3D, please read the [http://panda3d.cvs.sourceforge.net/*checkout*/panda3d/panda/src/doc/howto.use_multipass.txt Howto on Multipass Rendering] of the original Panda3D documentation.
