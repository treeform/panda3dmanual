<p>Particle renderers add particles to the visible scene graph according to the information stored in the particle objects and the type of renderer. All particle renderers have the following parameters:</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>alphaMode</td><td>Alpha setting over particle lifetime</td><td>PR_ALPHA_NONE, PR_ALPHA_OUT, PR_ALPHA_IN, PR_ALPHA_USER</td></tr>
<tr><td>userAlpha</td><td>Alpha value for ALPHA_USER alpha mode</td><td>Boolean</td></tr>
</table></center>
<p>The following list contains the different types of renderers and their unique parameters.</p>
<h3>PointParticleRenderer</h3>
<p>Renders particles as pixel points.</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>pointSize</td><td>Width and height of points, in pixels</td><td>[0, infinity)</td></tr>
<tr><td>startColor</td><td>Starting color</td><td>(r, g, b, a)</td></tr>
<tr><td>endColor</td><td>Ending color</td><td>(r, g, b, a)</td></tr>
<tr><td>blendType</td><td>How the particles blend from the start color to the end color</td><td>ONE_COLOR, BLEND_LIFE, BLEND_VEL</td></tr>
<tr><td>blendMethod</td><td>Interpolation method between colors</td><td>LINEAR, CUBIC</td></tr>
</table></center>
<p>ONE_COLOR: point is always the starting color.<br>
BLEND_LIFE: color is interpolated from start to end according to the age of the point<br>
BLEND_VEL: color is interpolated between start to end according to the velocity/terminal velocity.</p>

<h3>LineParticleRenderer</h3>
<p>Renders particles as lines between their current position and their last position.</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>headColor</td><td>Color of leading end</td><td>(r, g, b, a)</td></tr>
<tr><td>tailColor</td><td>Color of trailing end</td><td>(r, g, b, a)</td></tr>
</table></center>

<h3>SparkleParticleRenderer</h3>
<p>Renders particles star or sparkle objects, three equal-length perpendicular axial lines, much like jacks. Sparkle particles appear to sparkle when viewed as being smaller than a pixel.</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>centerColor</td><td>Color of center</td><td>(r, g, b, a)</td></tr>
<tr><td>edgeColor</td><td>Color of edge</td><td>(r, g, b, a)</td></tr>
<tr><td>birthRadius</td><td>Initial sparkle radius</td><td>[0, infinity)</td></tr>
<tr><td>deathRadius</td><td>Final sparkle radius</td><td>[0, infinity)</td></tr>
<tr><td>lifeScale</td><td>Whether or not sparkle is always of radius birthRadius</td><td>NO_SCALE, SCALE</td></tr>
</table></center>

<h3>SpriteParticleRenderer</h3>
<p>Renders particles as an image, using a Panda3D texture object. The image is always facing the user.</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>texture</td><td>Panda texture object to use as the sprite image</td><td>(r, g, b, a)</td></tr>
<tr><td>color</td><td>Color</td><td>(r, g, b, a)</td></tr>
<tr><td>xScaleFlag</td><td>If true, x scale is interpolated over particle’s life</td><td>Boolean</td></tr>
<tr><td>yScaleFlag</td><td>If true, y scale is interpolated over particle’s life</td><td>Boolean</td></tr>
<tr><td>animAngleFlag</td><td>If true, particles are set to spin on the Z axis</td><td>Boolean</td></tr>
<tr><td>initial_X_Scale</td><td>Initial x scaling factor</td><td>[0, infinity)</td></tr>
<tr><td>final_X_Scale</td><td>Final x scaling factor</td><td>[0, infinity)</td></tr>
<tr><td>initial_Y_Scale</td><td>Initial y scaling factor</td><td>[0, infinity)</td></tr>
<tr><td>final_Y_Scale</td><td>Final y scaling factor</td><td>[0, infinity)</td></tr>
<tr><td>nonAnimatedTheta</td><td>If false, sets the counterclockwise Z rotation of all sprites, in degrees</td><td>Boolean</td></tr>
<tr><td>alphaBlendMethod</td><td>Sets the interpolation blend method</td><td>LINEAR, CUBIC</td></tr>
<tr><td>alphaDisable</td><td>If true, alpha blending is disabled</td><td>Boolean</td></tr>
</table></center>

<h3>GeomParticleRenderer</h3>
<p>Renders particles as full 3D objects. This requires a geometry node.</p>
<center><table>
<tr><td><b>Variable</b></td><td><b>Definition</b></td><td><b>Values</b></td></tr>
<tr><td>geomNode</td><td>A geometry scene graph node</td><td><Node></td></tr>
</table></center>
