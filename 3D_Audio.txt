A wrapper <code>Audio3DManager</code> class has been implemented to help do positional audio. <code>Audio3DManager</code> takes as input an <code>AudioManager</code> and a listener for the sound. A listener is the point of reference from where the sound should be heard. For a player in a Panda3D session, this will most likely be the camera. Sounds further away from the camera will not be loud. Objects nearer to the camera will be loud.

<code python>
from direct.showbase import Audio3DManager
audio3d = Audio3DManager.Audio3DManager(base.sfxManagerList[0], camera)
</code>

To create a sound that is positional, you need to use the <code>loadSfx()</code> function on the <code>Audio3DManager</code> rather than the normal <code>loader.loadSfx()</code> which is for non-positional sounds. e.g.

<code python>
mySound = audio3d.loadSfx('blue.wav')
</code>

Sounds can be attached to objects such that when they move, the sound source will move along with them. 

<code python>
audio3d.attachSoundToObject(mySound, teapot)
</code>

You can use the <code>Audio3DManager's setSoundVelocity()</code> and <code>setListenerVelocity()</code> to set the velocity of sounds or the listener to get the doppler pitch shifting of moving objects. If you would like the <code>Audio3DManager</code> to help you adjust the velocity of moving objects automatically like it does with their position, you can call <code>setSoundVelocityAuto()</code> or <code>setListenerVelocityAuto()</code> like this:

<code python>
audio3d.setSoundVelocity(sound,velocityVector)
audio3d.setListenerVelocity(velocityVector)

base.cTrav = CollisionTraverser()
audio3d.setSoundVelocityAuto(sound)
audio3d.setListenerVelocityAuto()
</code>

Currently, for the latter to work, a CollisionTraverser must be attached to base.cTrav as you see in the example. If you already have one assigned to do collision detection that will be sufficient. Read more about [[Collision Traversers]].

The attenuation of moving sounds by distance and the doppler shift are based the way sound works in the real world. By default it assumes a scale of 1 panda unit equal to 1 foot. If you use another scale you'll need to use <code>setDistanceFactor</code> to adjust the scale.  

<code python>
audio3d.setDistanceFactor(scale)
</code>

You can adjust the rate that sounds attenuate by distance. If you want to position the sounds but don't want the volume to be effected by their distance, you can set the drop off factor to 0.

<code python>
audio3d.setDropOffFactor(scale)
</code>
