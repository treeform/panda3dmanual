<h2>The Basics</h2>

Loading static geometry is done using <code>[python]loader.loadModel[/python][cxx]window->load_model[/cxx]</code>:

[python]<code python>
m = loader.loadModel("mymodel.egg")
</code>[/python]
[cxx]<code cxx>
NodePath m = window->load_model(framework.get_models(), "mymodel.egg");
</code>[/cxx]

The path name specified in the loadModel can be an absolute path, or a relative
path.  Relative is recommended.  If a relative path is used, then Panda3D will search its <i>model path</i> to find the egg file.  The <i>model path</i> is controlled by panda's [[The Configuration File|configuration file]].

<h2>Inserting the Model into the Scene Graph</h2>

Do not forget that loading the model does not, by itself, cause the
model to be visible.  To cause Panda3D to render the model, you must
insert it into the scene graph:

[python]<code python>
m.reparentTo(render)
</code>[/python]
[cxx]<code cxx>
m.reparent_to(window->get_render());
</code>[/cxx]

You can read more about [[The Scene Graph]].

<h2>Panda Filename Syntax</h2>

The path used in the [python]loadModel[/python][cxx]load_model[/cxx] call must abide by Panda3D's filename
conventions.  For easier portability, Panda3D uses Unix-style pathnames,
even on Microsoft Windows.  This means that the directory separator character is always a forward slash, not the Windows backslash character, and there is no leading drive letter prefix.  (Instead of a leading drive letter, Panda uses an initial one-letter directory name to represent the drive.)

There is a fairly straightforward conversion from Windows filenames to panda filenames.  Always be sure to use Panda filename syntax when using a Panda3D library function, or one of the panda utility programs:

[python]<code python>
# WRONG:
loader.loadModel("c:\\Program Files\\My Game\\Models\\Model1.egg")

# RIGHT:
loader.loadModel("/c/Program Files/My Game/Models/Model1.egg")
</code>[/python]
[cxx]<code cxx>
# WRONG:
window->load_model(framework.get_models(), "c:\\Program Files\\My Game\\Models\\Model1.egg");

# RIGHT:
window->load_model(framework.get_models(), "/c/Program Files/My Game/Models/Model1.egg");
</code>[/cxx]

Panda uses the <code>Filename</code> class to store Panda-style filenames; many Panda functions expect a Filename object as a parameter.  The Filename class also contains several useful methods for path manipulation and file access, as well as for converting between Windows-style filenames and Panda-style filenames; see the API reference for a more complete list.

To convert a Windows filename to a Panda pathname, use code similar to the following:

[python]<code python>
from pandac.PandaModules import Filename
winfile = "c:\\MyGame\\Model1.egg"
pandafile = Filename.fromOsSpecific(winfile)
print pandafile
</code>[/python]
[cxx]<code cxx>
#include "filename.h"

const string winfile = "c:\\MyGame\\Model1.egg";
Filename pandafile = Filename::from_os_specific(winfile);
std::cout << pandafile.get_fullpath() << "\n";
</code>[/cxx]

To convert a Panda filename into a Windows filename, use code not unlike this:

[python]<code python>
from pandac.PandaModules import Filename
pandafile = Filename("/c/MyGame/Model1.egg")
winfile = pandafile.toOsSpecific()
print winfile
</code>[/python]
[cxx]<code cxx>
#include "filename.h"

Filename pandafile ("/c/MyGame/Model1.egg");
const string winfile = pandafile.to_os_specific();
std::cout << winfile << "\n";
</code>[/cxx]

The Filename class can also be used in combination with [python]python's built-in path manipulation mechanisms[/python][cxx]Panda's ExecutionEnvironment utility class[/cxx].
Let's say, for instance, that you want to load a model, and the
model is in the "model" directory that is in the same directory as the main program's [python]"py"[/python][cxx]executable[/cxx] file.  Here is how you
would load the model:

[python]<code python>
import sys,os
from pandac.PandaModules import Filename

# Get the location of the 'py' file I'm running:
mydir = os.path.abspath(sys.path[0])

# Convert that to panda's unix-style notation.
mydir = Filename.fromOsSpecific(mydir).getFullpath()

# Now load the model:
model = loader.loadModel(mydir + "/models/mymodel.egg")
</code>[/python]
[cxx]<code cxx>
#include "filename.h"
#include "executionEnvironment.h"

// Get the location of the executable file I'm running:
Filename mydir = ExecutionEnvironment::get_binary_name();
mydir = mydir.get_dirname();

// Now load the model:
window->load_model(framework.get_models(), mydir + "/models/mymodel.egg");
</code>[/cxx]

You need to keep in mind that the [cxx]Operating System's[/cxx] standard [python]python[/python] functions [python](like os.remove())[/python] work with OS specific paths. So do not forget to convert your OS Generic paths back to OS Specific paths when using built-in functions. In cases that Panda offers equivalent functions through the Filename class, it is recommended to use that instead.
