The graphics engine is the heart of the rendering process.  The <code>GraphicsEngine</code> class is ultimately responsible for all of the drawing and culling operations per frame. 

Normally, there is no need to create a GraphicsEngine, as Panda3D will create one for you at startup.  This default GraphicsEngine is stored in <code>base.graphicsEngine</code>.

Note also that the following interfaces are strictly for the advanced user.  Normally, if you want to create a new window or an offscreen buffer for rendering, you would just use the <code>base.openWindow()</code> or <code>window.makeTextureBuffer()</code> interfaces, which handle all of the details for you automatically.

However, please continue reading if you want to understand in detail how Panda manages windows and buffers, or if you have special needs that are not addressed by the above convenience methods.

<h2>Rendering a frame</h2>

There is one key interface to rendering each frame of the graphics simulation:

<pre class="codeblock">
base.graphicsEngine.renderFrame()
</pre>

This method causes all open GraphicsWindows and GraphicsBuffers to render their contents for the current frame.

In order for Panda3D to render anything, this method must be called once per frame.  Normally, this is done automatically by the task "igloop", which is created when you start Panda.

<h2>Using a GraphicsEngine to create windows and buffers</h2>

In order to render in Panda3D, you need a <b>GraphicsStateGuardian</b>, and either a <b>GraphicsWindow</b> (for rendering into a window) or a <b>GraphicsBuffer</b> (for rendering offscreen).  You cannot create or destroy these objects directly; instead, you must use interfaces on the GraphicsEngine to create them.

Before you can create either of the above, you need to have a [[The Graphics Pipe|GraphicsPipe]], which specifies the particular graphics API you want to use (e.g. OpenGL or DirectX).  The default GraphicsPipe specified in your Config.prc file has already been created at startup, and can be accessed by <code>base.pipe</code>.

Now that you have a GraphicsPipe and a GraphicsEngine, you can create a GraphicsStateGuardian object.  This object corresponds to a single graphics context on the graphics API, e.g. a single OpenGL context.  (The context owns all of the OpenGL or DirectX objects like display lists, vertex buffers, and texture objects.)  You need to have at least one GraphicsStateGuardian before you can create a GraphicsWindow:

<pre class="codeblock">
myGsg=base.graphicsEngine.makeGsg(base.pipe)
</pre>

Now that you have a GraphicsStateGuardian, you can use it to create an onscreen GraphicsWindow or an offscreen GraphicsBuffer:

<pre class="codeblock">
base.graphicsEngine.makeWindow(gsg, name, sort)
base.graphicsEngine.makeBuffer(gsg, name, sort, xSize, ySize, wantTexture)
</pre> 

<code>gsg</code> is the GraphicsStateGuardian, <code>name</code> is an arbitrary name you want to assign to the window/buffer, and <code>sort</code> is an integer that determines the order in which the windows/buffers will be rendered. 

The buffer specific arguments <code>xSize</code> and <code>ySize</code> decide the dimensions of the buffer, and <code>wantTexture</code> should be set to <code>True</code> if you want to retrieve a texture from this buffer later on. 

You can also use <code>graphicsEngine.makeParasite(host,name,sort,xSize,ySize)</code>, where host is a [[The GraphicsOutput class|GraphicsOutput]] object. It creates a buffer but it does not allocate room for itself. Instead it renders to the framebuffer of <code>host</code>. It effectively has <code>wantTexture</code> set to <code>True</code> so you can retrieve a texture from it later on.

See [[The GraphicsOutput class]] and [[Graphics Buffers and Windows]] for more information.

<pre class="codeblock">
myWindow=base.graphicsEngine.makeWindow(myGsg, "Hello World", 0)
myBuffer=base.graphicsEngine.makeBuffer(myGsg, "Hi World", 0, 800,600, True)
myParasite=base.graphicsEngine.makeBuffer(myBuffer,"Im a leech", 0, 800, 600)
</pre>

Note: if you want the buffers to be visible add <code>show-buffers true</code> to your [[The Configuration File|configuration file]].  This causes the buffers to be opened as windows instead, which is useful while debugging.

<h2>Sharing graphics contexts</h2>

It is possible to share the same GraphicsStateGuardian among multiple different GraphicsWindows and/or GraphicsBuffers; if you do this, then the graphics context will be used to render into each window one at a time.  This is particularly useful if the different windows will be rendering many of the same objects, since then the same texture objects and vertex buffers can be shared between different windows.

It is also possible to use a different GraphicsStateGuardian for each different window.  This means that if a particular texture is to be rendered in each window, it will have to be loaded into graphics memory twice, once in each context, which may be wasteful.  However, there are times when this may be what you want to do, for instance if you have multiple graphics cards and you want to to render to both of them simultaneously.  (Note that the actual support for simultaneously rendering to multiple graphics cards is currently unfinished in Panda at the time of this writing, but the API has been designed with this future path in mind.)

<h2>Closing windows</h2>

To close a specific window or buffer you use <code>removeWindow(window)</code>. To close all windows <code>removeAllWindows()</code>

<pre class="codeblock">
base.graphicsEngine.removeWindow(myWindow)
base.graphicsEngine.removeAllWindows()
</pre>

<h2>More about GraphicsEngine</h2>

Here is some other useful functionality of the <code>GraphicsEngine</code> class.

<center><table>
<tr><td><code>getNumWindows()</code></td><td>Returns the number of windows and buffers that this <code>GraphicsEngine</code> object is managing.</td></tr>
<tr><td><code>isEmpty()</code></td><td>Returns <code>True</code> if this <code>GraphicsEngine</code> is not managing any windows or buffers.</td></tr>
</table></center>

See API for advanced functionality of <code>GraphicsEngine</code> and <code>GraphicsStateGuardian</code> class.
