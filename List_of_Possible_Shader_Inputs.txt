Shader parameters must have names that are recognized by panda.  Here is a list of the allowable parameter names: (Note that it might not be complete)

<table class="code" border=1>
<tr>
<td>uniform sampler2D tex_0</td>
<td>The model's first texture.  This requires that the model be textured in the normal manner.  You may also use tex_1, tex_2, and so forth, if the model is multitextured.</td>
</tr>
<tr>
<td>sampler3D or samplerCUBE</td>
<td>If the model uses a 3D texture or a cubemap, use tex3D and texCUBE to access the color.</td>
</tr>
<tr>
<td>uniform sampler2D tex_0_suffix</td>
<td>Obtain a texture by concatenating a hyphen and the suffix to the filename of the model's first texture.  For example, if tex_0 is "woman.jpg", then tex_0_normalmap is "woman-normalmap.jpg", and tex_0_specular is "woman-specular.jpg".  You may also use tex_1_suffix, tex_2_suffix, and so forth.</td>
</tr>
<tr><td width="40%">float3 vtx_position: POSITION</td>
<td>Vertex Position. Vertex shader only.  You may also use float4, in which case (w==1).</td>
</tr>
<tr>
<td>float3 vtx_normal: NORMAL</td>
<td>Vertex Normal. Vertex shader only.</td>
</tr>
<tr>
<td>float4 vtx_color : COLOR</td>
<td>Vertex color. Vertex shader only.</td>
</tr>
<tr>
<td>float2 vtx_texcoord0: TEXCOORD0</td>
<td>Texture coordinate associated with the model's first texture.  This requires that the model be textured in the normal manner.  You may also use vtx_texcoord1, vtx_texcoord2, and so forth if the model is multitextured.  Vertex shader only.</td>
</tr>
<tr>
<td>float3 vtx_tangent0</td>
<td>Tangent vector associated with the model's first texture.  This can only be used if the model has been textured in the normal manner, and if binormals have been precomputed.  You may also use vtx_tangent1, vtx_tangent2, and so forth if the model is multitextured.  Vertex shader only.</td>
</tr>
<tr>
<td>float3 vtx_binormal0</td>
<td>Binormal vector associated with vtx_texcoord0.  This can only be used if the model has been textured in the normal manner, and if binormals have been precomputed.  You can also use vtx_binormal1, vtx_binormal2, and so forth if the model has been multitextured.  Vertex shader only.</td>
</tr>
<tr>
<td>floatX vtx_anything</td>
<td>Panda makes it possible to store arbitrary columns of user-defined data in the vertex table; see [[GeomVertexData]].  You can access this data using this syntax.  For example, vtx_chicken will look for a column named "chicken" in the vertex array.  Vertex shader only.</td>
</tr>
<tr>
<td>uniform float4x4 trans_x_to_y</td>
<td>A matrix that transforms from coordinate system X to coordinate system Y.  See the section on [[Shaders and Coordinate Spaces]] for more information.
</td>
</tr>
<tr>
<td>uniform float4x4 tpose_x_to_y</td>
<td>Transpose of trans_x_to_y</td>
</tr>
<tr>
<td>uniform float4 row0_x_to_y</td>
<td>Row 0 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 row1_x_to_y</td>
<td>Row 1 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 row2_x_to_y</td>
<td>Row 2 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 row3_x_to_y</td>
<td>Row 3 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 col0_x_to_y</td>
<td>Col 0 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 col1_x_to_y</td>
<td>Col 1 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 col2_x_to_y</td>
<td>Col 2 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4 col3_x_to_y</td>
<td>Col 3 of trans_x_to_y.</td>
</tr>
<tr>
<td>uniform float4x4 mstrans_x</td>
<td>Model-Space Transform of X, aka trans_x_to_model</td>
</tr>
<tr>
<td>uniform float4x4 cstrans_x</td>
<td>Clip-Space Transform of X, aka trans_x_to_clip</td>
</tr>
<tr>
<td>uniform float4x4 wstrans_x</td>
<td>World-Space Transform of X, aka trans_x_to_world</td>
</tr>
<tr>
<td>uniform float4x4 vstrans_x</td>
<td>View-Space Transform of X, aka trans_x_to_view</td>
</tr>
<tr>
<td>uniform float4 mspos_x</td>
<td>Model-Space Position of X, aka row3_x_to_model</td>
</tr>
<tr>
<td>uniform float4 cspos_x</td>
<td>Clip-Space Position of X, aka row3_x_to_clip</td>
</tr>
<tr>
<td>uniform float4 wspos_x</td>
<td>World-Space Position of X, aka row3_x_to_world</td>
</tr>
<tr>
<td>uniform float4 vspos_x</td>
<td>View-Space Position of X, aka row3_x_to_view</td>
</tr>
<tr>
<td>uniform float4x4 mat_modelview</td>
<td>Modelview Matrix</td>
</tr>
<tr>
<td>uniform float4x4 inv_modelview</td>
<td>Inverse Modelview Matrix</td>
</tr>
<tr>
<td>uniform float4x4 tps_modelview</td>
<td>Transposed Modelview Matrix</td>
</tr>
<tr>
<td>uniform float4x4 itp_modelview</td>
<td>Inverse Transposed Modelview Matrix</td>
</tr>
<tr>
<td>uniform float4x4 mat_projection</td>
<td>Projection Matrix</td>
</tr>
<tr>
<td>uniform float4x4 inv_projection</td>
<td>Inverse Projection Matrix</td>
</tr>
<tr>
<td>uniform float4x4 tps_projection</td>
<td>Transposed Projection Matrix</td>
</tr>
<tr>
<td>uniform float4x4 itp_projection</td>
<td>Inverse Transposed Projection Matrix</td>
</tr>
<tr>
<td>uniform float4x4 mat_modelproj</td>
<td>Composed Modelview/Projection Matrix</td>
</tr>
<tr>
<td>uniform float4x4 inv_modelproj</td>
<td>Inverse ModelProj Matrix</td>
</tr>
<tr>
<td>uniform float4x4 tps_modelproj</td>
<td>Transposed ModelProj Matrix</td>
</tr>
<tr>
<td>uniform float4x4 itp_modelproj</td>
<td>Inverse Transposed ModelProj Matrix</td>
</tr>
<tr>
<td>uniform float4 k_anything</td>
<td>A constant vector that was stored using <code>setShaderInput</code>.  Parameter <i>k_anything</i> would match data supplied by the call <i>setShaderInput("anything", Vec4(x,y,z,w))</i></td>
</tr>
<tr>
<td>uniform sampler2D k_anything</td>
<td>A constant texture that was stored using <code>setShaderInput</code>.  Parameter <i>k_anything</i> would match data supplied by the call <i>setShaderInput("anything", myTex)</i></td>
</tr>
<tr>
<td>uniform float4x4 k_anything</td>
<td>A constant matrix that was stored using <code>setShaderInput</code>.  Parameter <i>k_anything</i> would match data supplied by the call <i>setShaderInput("anything", myNodePath)</i>.  The matrix supplied is the nodepath's <i>local</i> transform.</td>
</tr>
<tr>
<td>uniform float4 texpad_x</td>
<td>X must be the name of a texture specified via shaderInput. Contains the U,V coordinates of the center of the texture.  This will be (0.5,0.5) if the texture is not padded, but it will be less if the texture is padded.</td>
</tr>
<tr>
<td>uniform float4 texpix_x</td>
<td>X must be the name of a texture specified via shaderInput. Contains the U,V offset of a single pixel in the texture (ie, the reciprocal of the texture size).</td>
</tr>
<tr>
<td>uniform float4x4 attr_material</td>
<td>The contents of the material attribute.  Row 0 is ambient, Row 1 is diffuse, Row 2 is emission, Row 3 is specular, with shininess in W.</td>
</tr>
<tr>
<td>uniform float4 attr_color</td>
<td>The contents of the color attribute.  This is white unless the model has a flat color applied.</td>
</tr>
<tr>
<td>uniform float4 attr_colorscale</td>
<td>The contents of the color scale attribute.  This is white unless the model has a color scale applied using nodePath.setColorScale.<br>This variable is only available in 1.6.2 and above.</td>
</tr>
<tr>
<td>uniform float4 alight_x</td>
<td>X must be an AmbientLight specified via a shaderInput.  Contains the color of the light.</td>
</tr>
<tr>
<td>uniform float4x4 dlight_x</td>
<td>X must be an DirectionalLight specified via a shaderInput.  Row 0 is color, row 1 is specular, row 2 is model-space direction, row 3 is model-space pseudo half-angle.</td>
</tr>
<tr>
<td>uniform float4 plane_x</td>
<td>X must be an PlaneNode specified via a shaderInput.  Contains the four terms of the plane equation.<br>This variable is only available in 1.6.2 and above.</td>
</tr>
<tr>
<td>uniform float4 clipplane_0</td>
<td>Contains the parameters of the first clipplane (also: clipplane_1, clipplane_2, etc. for subsequent clip planes) in world-space coordinates.<br>This variable is only available in 1.6.2 and above.</td>
</tr>
<tr>
<td>floatX l_position: POSITION</td>
<td>Linearly interpolated Position, as supplied by the vertex shader to the fragment shader. Declare "out" in the vertex shader, "in" in the fragment shader.</td>
</tr>
<tr>
<td>floatX l_color0: COLOR0</td>
<td>Linearly interpolated Primary color, as supplied by the vertex shader to the fragment shader. Declare "out" in the vertex shader, "in" in the fragment shader.</td>
</tr>
<tr>
<td>floatX l_color1: COLOR1</td>
<td>Linearly interpolated Secondary color, as supplied by the vertex shader to the fragment shader. Declare "out" in the vertex shader, "in" in the fragment shader.</td>
</tr>
<tr>
<td>floatX l_texcoord0: TEXCOORD0</td>
<td>Linearly interpolated Texture Coordinate 0, as supplied by the vertex shader to the fragment shader. You may also use l_texcoord1, l_texcoord2, and so forth. Declare "out" in the vertex shader, "in" in the fragment shader.</td>
</tr>
<tr>
<td>out floatX o_color: COLOR</td>
<td>Output Color, as supplied by the fragment shader to the blending units. Fragment shader only.</td>
</tr>
</table>
