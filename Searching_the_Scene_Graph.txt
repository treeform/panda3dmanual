It is often useful to get a handle to a particular node deep within the scene graph, especially to get a sub-part of a model that was loaded from a single file.  There are a number of methods dedicated to finding entrenched nodes and returning the NodePaths.

First, and most useful, is the ls() command:

[python]<code python>
myNodePath.ls()
</code>[/python][cxx]<code cxx>
myNodePath.ls();
</code>[/cxx]

This simply lists all of the children of the indicated NodePath, along with all of their children, and so on until the entire subgraph is printed out.  It also lists the transforms and [[Render Attributes]] that are on each node.  This is an especially useful command for when you're running interactively with Python; it's a good way to check that the scene graph is what you think it should be.

The two methods <code>find()</code> and <code>[func]findAllMatches[/func]()</code>
will return a <code>NodePath</code> and a <code>NodePathCollection</code> respectively. These methods require a path string as an argument. Searches can based on name or type. In its simplest form this path consists of a series of node names separated by slashes, like a directory pathname. When creating the string each component may optionally consist of one of the following special names, instead of a node name.

<table>
<tr><td width=80>*</td><td>Matches exactly one node of any name</td></tr>
<tr><td>**</td><td>Matches any sequence of zero or more nodes</td></tr>
<tr><td>+typename</td><td>Matches any node that is or derives from the given type</td></tr>
<tr><td>-typename</td><td>Matches any node that is the given type exactly</td></tr>
<tr><td>=tag</td><td>Matches any node that has the indicated tag</td></tr>
<tr><td>=tag=value</td><td>Matches any node whose tag matches the indicated value</td></tr>
</table>

Standard filename globbing characters, such as *, ?, and [a-z] are also usable. Also the @@ special character before a node name indicates that this particular node is a stashed node. Normally, stashed nodes are not returned. @@*, by extension, means any stashed node.

The argument may also be followed with control flags. To use a control flag, add a semicolon after the argument, followed by at least one of the special flags with no extra spaces or punctuation.

<table>
<tr><td width=50>-h</td><td>Do not return hidden nodes</td></tr>
<tr><td>+h</td><td>Return hidden nodes</td></tr>
<tr><td>-s</td><td>Do not return stashed nodes unless explicitly referenced with @@</td></tr>
<tr><td>+s</td><td>Return stashed nodes even without any explicit @@ characters</td></tr>
<tr><td>-i</td><td>Node name comparisons are not case insensitive: case must match exactly</td></tr>
<tr><td>+i</td><td>Node name comparisons are case insensitive: case is not important. This affects matches against the node name only; node type and tag strings are always case sensitive</td></tr>
</table>

The default flags are +h-s-i.

The <code>find()</code> method searches for a single node that matches the path string given. If there are multiple matches, the method returns the shortest match. If it finds no match, it will return an empty NodePath. On the other hand, <code>[func]findAllMatches[/func]()</code> will return all NodePaths found, shortest first.

[python]<code python>
myNodePath.find("<Path>")
myNodePath.findAllMatches("<Path>")
</code>[/python][cxx]<code cxx>
myNodePath.find("<Path>");
myNodePath.find_all_matches("<Path>");
</code>[/cxx]

Some examples:

[python]<code python>
myNodePath.find("house/door")
</code>[/python][cxx]<code cxx>
myNodePath.find("house/door");
</code>[/cxx]

This will look for a node named "door", which is a child of a node named "house", which is a child of the starting path.

[python]<code python>
myNodePath.find("**/red*")
</code>[/python][cxx]<code cxx>
myNodePath.find("**/red*");
</code>[/cxx]

This will look for any node anywhere in the tree (below the starting path) with a name that begins with "red". More documentation about matching patterns can be found at the [http://www.panda3d.org/apiref.php?page=NodePath NodePath API reference page].

In addition there are also the methods <code>[func]getParent[/func]()</code> and <code>[func]getChildren[/func]()</code>. <code>[func]getParent[/func]()</code> returns the NodePath of the parent node. <code>[func]getChildren[/func]()</code> returns the children of the current node as a NodePathCollection[python] (which can be treated like a list, in Panda3D version 1.6.0 and above)[/python].

[python]<code python>
for child in myNodePath.getChildren():
  print child
</code>[/python][cxx]<code cxx>
NodePathCollection children = myNodePath.get_children();
for (int i = 0; i < children.size(); ++i) {
  std::cout << children[i] << "\n";
}
</code>[/cxx]

For more information and a complete list of NodePath 
functions please see the [http://panda3d.org/apiref.php?page=NodePath API reference].
